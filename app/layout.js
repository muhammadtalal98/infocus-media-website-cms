import "./globals.css";
import Navbar from "../components/Navbar";
import ParallaxWrapper from "../components/ParallaxWrapper";
import { AuthProvider } from "@/context/AuthContext";
import { Almarai } from "next/font/google";
import NavigationLoaderManager from "@/components/NavigationLoaderManager";

export const metadata = {
  title: "InFocusMedia",
  description: "Generated by create next app",
};

function NavigationLoaderOverlay() {
  const { navigationLoading } = useNavigationLoader();
  if (!navigationLoading) return null;
  return (
    <div className="fixed inset-0 z-[9999] bg-white bg-opacity-80 flex flex-col h-screen justify-center items-center pointer-events-none">
      <Loader />
    </div>
  );
}

export default function RootLayout({ children }) {
  return (
    <html lang="en" className="overflow-x-hidden">
      <head>
        {/* Removed Google Fonts <link> in favor of next/font */}
        <title>Infocus Media - Creative Agency</title>
        <meta name="description" content="Infocus Media: Born from Emirati soil, our roots run deep and our vision soars high. Explore our case studies, services, and creative work." />
        <meta property="og:title" content="Infocus Media - Creative Agency" />
        <meta property="og:description" content="Explore our case studies, services, and creative work." />
        <meta property="og:image" content="/logo.png" />
        <meta property="og:type" content="website" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </head>
      <body className={`relative`}>
        <NavigationLoaderManager>
          <AuthProvider>
            <Navbar />
            {children}
          </AuthProvider>
        </NavigationLoaderManager>
      </body>
    </html>
  );
}

function NavigationLoaderHandler() {
  const pathname = usePathname();
  const { setNavigationLoading } = useNavigationLoader();
  useEffect(() => {
    setNavigationLoading(true);
    const timeout = setTimeout(() => setNavigationLoading(false), 600); // fallback in case page is too fast
    return () => {
      clearTimeout(timeout);
      setNavigationLoading(false);
    };
  }, [pathname, setNavigationLoading]);
  return null;
}
